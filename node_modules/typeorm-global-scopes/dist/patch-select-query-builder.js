"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var typeorm_1 = require("typeorm");
var GET_QUERY_COPY = '___global_scopes_getQuery_copy___';
var MySelectQB = /** @class */ (function (_super) {
    __extends(MySelectQB, _super);
    function MySelectQB() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Gets generated sql query without parameters being replaced.
     */
    MySelectQB.prototype.getQuery = function () {
        this.___patchScopes___();
        return this[GET_QUERY_COPY]();
    };
    /**
     * Executes Entity global scopes
     */
    MySelectQB.prototype.___patchScopes___ = function () {
        var _this = this;
        var table = this.expressionMap.mainAlias;
        if (!table || !table.hasMetadata)
            return;
        var metadata = table.metadata.tableMetadataArgs;
        if (metadata.scopes && metadata.scopesEnabled) {
            metadata.scopes.forEach(function (scope) { return scope(_this, table.name); });
        }
        else if (metadata.scopesEnabled === false) {
            metadata.scopesEnabled = true;
        }
    };
    return MySelectQB;
}(typeorm_1.SelectQueryBuilder));
/**
 * Patch SelectQueryBuilder with own implementation that executes the entity global query scopes
 */
exports.patchSelectQueryBuilder = function () {
    // Saves original getQuery method so we don't lose it's original functionality
    typeorm_1.SelectQueryBuilder.prototype[GET_QUERY_COPY] = typeorm_1.SelectQueryBuilder.prototype.getQuery;
    Object.getOwnPropertyNames(MySelectQB.prototype).forEach(function (propertie) {
        return Object.defineProperty(typeorm_1.SelectQueryBuilder.prototype, propertie, Object.getOwnPropertyDescriptor(MySelectQB.prototype, propertie));
    });
};
//# sourceMappingURL=patch-select-query-builder.js.map